// Sad-Script: S-Expressions and Dashes

// non-terminals
<program> ::= (<function> | <statement>)*
<function> ::= 
   (FUNCTION IDENTIFIER <function-parameters> (<body> | (EQUALS <expression>))) |
   (IMPORT FUNCTION IDENTIFIER <function-parameters>)
<function-parameters> ::= (OPEN_PAREN IDENTIFIER* CLOSE_PAREN) | IDENTIFIER
<body> ::= OPEN_BRACE <statement>* CLOSE_BRACE
<expression> ::= INT_LIT | DOUBLE_LIT | BOOL_LIT | STRING_LIT | NIL | <call> | <infix-call> | IDENTIFIER | <closure> | <match>
<call> ::= OPEN_PAREN IDENTIFIER <expression>* CLOSE_PAREN
<infix-call> ::= OPEN_BRACKET <expression> IDENTIFIER <expression>* CLOSE_BRACKET
<statement> ::= <call> | <infix-call> | <var> | <set> | <if> | <for> | <while> | <do> | <switch> | <return> | <die>
<var> ::= VAR (IDENTIFIER | (OPEN_PAREN IDENTIFIER+ CLOSE_PAREN)) EQUALS <expression>
<set> ::= SET (IDENTIFIER | (OPEN_PAREN IDENTIFIER+ CLOSE_PAREN)) EQUALS <expression>
<closure> ::= LAMBDA
   (IDENTIFIER | (OPEN_PAREN IDENTIFIER* CLOSE_PAREN))
   (<expression> | <body>)
<if> ::= IF <expression> <body> (ELSEIF <expression> <body>)* (ELSE <body>)?
<for> ::= 
   (FOR IDENTIFIER FROM <expression> TO <expression> <body>) | 
   (FOR IDENTIFIER (AT IDENTIFIER)? IN <expression> <body>) 
<while> ::= WHILE <expression> <body>
<do> ::= DO <body> WHILE <expression>
<switch> ::= SWITCH <expression>* OPEN_BRACE (CASE <expression>+ COLON <body>)* (DEFAULT COLON <body>)? CLOSE_BRACE
<match> ::= MATCH <expression>* OPEN_BRACE (CASE <expression>+ COLON <expression>)* (DEFAULT COLON <expression>)? CLOSE_BRACE
<return> ::= RETURN <expression>
<die> ::= DIE <expression>

// terminals
INT_LIT
DOUBLE_LIT
BOOL_LIT
STRING_LIT
OPEN_PAREN
CLOSE_PAREN
OPEN_BRACKET
CLOSE_BRACKET
OPEN_BRACE
CLOSE_BRACE
COLON
IDENTIFIER
FUNCTION
VAR
SET
IF
ELSE
ELSEIF
FOR
TO
AT
IN
WHILE
DO
SWITCH
CASE
DEFAULT
RETURN
DIE
IMPORT
NIL
FROM
EQUALS (subtype of IDENTIFIER)
LAMBDA
MATCH